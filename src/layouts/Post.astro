---
import type { CollectionEntry } from "astro:content";

import { COLLECTION_NAMES_LIST } from "src/alkaline.config";

import { getEntry, render } from "astro:content";
import { Image } from "astro:assets";

import Layout from "@layouts/Layout.astro";
import Tags from "@components/Astro/Tags.astro";
import Author from "@components/Astro/Author.astro";

interface Props {
	collectionName: (typeof COLLECTION_NAMES_LIST)[number];
	postId: string | number;
	tags: string[] | undefined | null;
	class?: string | undefined;
}

const { class: className, collectionName, postId } = Astro.props;

const options = { "rounded-theme": true };

const entry:
	| CollectionEntry<(typeof COLLECTION_NAMES_LIST)[number]>
	| undefined = await getEntry(collectionName, String(postId));

if (!entry) {
	return new Response(null, {
		status: 404,
		statusText: "Not found",
	});
}

const { Content } = await render(entry);
---

<Layout
	title={entry.data.title}
	description={entry.data.description}
	class="capitalize"
>
	<section class="mt-0 mb-2">
		<article class:list={["prose", className]}>
			{entry.data.subtitle && <p class="h2">{entry.data.subtitle}</p>}

			{
				entry.data.cover && (
					<Image
						src={entry.data.cover.src}
						alt={entry.data.cover.alt || entry.data.title}
						class:list={[
							"w-full h-auto max-h-[25rem] object-cover my-4",
							options,
						]}
						width={600}
					/>
				)
			}

			<Author
				authorId={entry.data.authorId}
				pubDateTime={entry.data.pubDatetime}
			/>
			{
				entry.data.tags && (
					<span class="flex items-baseline -mt-4 mb-14">
						<Tags tags={entry.data.tags} />
					</span>
				)
			}

			<Content />
		</article>
	</section>
</Layout>
